<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="referrer" content="no-referrer" />
    <meta property="og:title" content="GoChat - Online Meeting" />
    <meta property="og:description" content="Cùng tham gia trò chuyện với bạn bè trong Go Chat" />
    <meta property="og:image" content="/images/GoChatHo.png" />
    <meta property="og:url" content="https://videochatapp.online" />
    <meta property="og:site_name" content="GoChat" />
    <meta property="og:type" content="website" />
    <title>GoChat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="icon" href="/images/GoLogoNBg.png">
    <!-- clock -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.js">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.5.0/js/bootstrap-datepicker.js">
    </script>
</head>
<style>
    html,
    body {
        box-sizing: border-box;

        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;

    }

    .icon-container {
        position: relative;
        display: inline-block;
    }

    .new-noti {
        content: '';
        position: absolute;
        top: -5px;
        right: -5px;
        width: 10px;
        height: 10px;
        background-color: green;
        border-radius: 50%;
        border: 2px solid white;
    }

    .profile-pic {
        display: inline-block;
        vertical-align: middle;
        width: 35px;
        height: 35px;
        overflow: hidden;
        border-radius: 50%;
    }

    .profile-pic img {
        width: 100%;
        height: auto;
        object-fit: cover;
    }

    .profile-menu .dropdown-menu {
        right: 0;
        left: unset;
    }

    .profile-menu .fa-fw {
        margin-right: 10px;
    }

    .left-panel .buttons {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .new-meeting,
    .join,
    .schedule,
    .share-screen {
        width: 90px;
        height: 90px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 20px;
        color: #fff;
        cursor: grab;
    }

    .new-meeting:hover,
    .join:hover,
    .schedule:hover,
    .share-screen:hover {
        box-shadow: 0px 8px 15px -10px rgb(61, 61, 61);
        transform: translate(0px, -3px);
    }

    .new-meeting {
        background-color: #faa525;
    }

    .join {
        background-color: #7ED957;
    }

    .schedule {
        background-color: #7ED957;
    }

    .share-screen {
        background-color: #7ED957;
    }

    .clockdate-wrapper {
        background: #141E30;
        background: -webkit-linear-gradient(to right, #243B55, #141E30);
        background: linear-gradient(to right, #243B55, #141E30);
        padding: 25px;
        text-align: center;
        border-radius: 5px;
    }

    #clock {
        font-size: 40px;
        text-shadow: 0px 0px 1px #fff;
        color: #fff;
    }

    #clock span {
        color: rgba(255, 255, 255, 0.8);
        text-shadow: 0px 0px 1px #333;
        font-size: 30px;
        position: relative;
        top: -5px;
    }

    #date {
        letter-spacing: 3px;
        font-size: 14px;
        color: #fff;
    }

    #dateSche {
        letter-spacing: 3px;
        font-size: 14px;
        color: #fff;
    }

    .dropdown-menu {
        min-width: max-content !important;
    }

    .dropdown-item {
        padding: 0px 5px !important;
        font-size: 14px !important;
    }

    .modal-header {
        background-color: #007bff;
        color: white;
    }

    .tab button {
        display: block;
        background-color: inherit;
        color: gray;
        padding: 10px;
        width: 100%;
        border: none;
        outline: none;
        text-align: center;
        cursor: pointer;
        transition: 0.3s;
        font-size: 17px;
    }

    .tab button:hover {
        background-color: #f7f6f6;
        border-left: 5px solid #fbe3a7;
    }

    .tab button.active {
        color: #FBB040;
        font-weight: 600;
        border-left: 5px solid #fbc02d;
        background-color: #efeeee;
    }

    .hidden {
        display: none;
    }


    @media only screen and (max-width: 600px) {

        .right-box {
            display: none;
        }

        .content {
            justify-content: center;
        }

        .left-box {
            margin: auto;
        }
    }

    .device-options {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        background-color: transparent;
        border: 1px solid black;
        transition: background-color 0.3s, border 0.3s;
    }

    li {
        cursor: pointer;
    }

    #copyButton{
        border: solid 1px rgb(255, 255, 255);
    }
    #copyButton:hover{
        border: solid 1px rgb(113, 113, 113);

    }
</style>

<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        {{!-- <button onclick="sendMessage('123', '{{user.userEmail}}', 'user1@gmail.com')">SEND MESSAGE</button> --}}
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <img src="images/GoChatHo.png" alt="" height="30">
            </a> <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ms-auto mb-lg-0 profile-menu d-flex align-items-center">
                    <button class="pe-3 btn shadow-none" data-bs-toggle="modal" data-bs-target="#settingModal"
                        id="settingsButton">
                        <div class="icon-container" data-bs-toggle="tooltip" data-bs-placement="bottom"
                            title="Settings">
                            <i class="bi bi-gear h5"></i>
                        </div>
                    </button>
                    <button class="pe-3 btn btn-light shadow-none" id="noticDropdown" onclick="getPermission()"
                        data-bs-toggle="dropdown" aria-expanded="false">
                        <div class="icon-container" data-bs-toggle="tooltip" data-bs-placement="bottom"
                            title="Notifications">
                            <i class="bi bi-bell h5"></i>
                            <span class="new-noti d-none" id="new-noti-green"></span>
                        </div>
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="noticDropdown" onclick="getPermission()"
                        id="ulInvitations" style="overflow-y: auto; max-height: 300px">
                        <li class="px-3 py-2" id="emptyNotiLi">
                            <div class="d-flex align-items-center">
                                <div>
                                    <span>
                                        Nothing here
                                    </span>
                                </div>
                            </div>
                        </li>
                        <li class="px-3 py-2" id="blockNotiLi" class="d-none">
                            <div class="d-flex align-items-center">
                                <div>
                                    <span id="permissionText">
                                        Notification need permission to show and <br> private browser do not support
                                        notifications.
                                    </span>
                                </div>
                            </div>
                        </li>
                        {{!-- <li id="getPermissionLi">
                            <Button class="bg-transparent border-0" onclick="getPermission()">Get permission</Button>
                        </li> --}}
                        {{!-- <li class="px-3 py-2">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    {{#if user.avatar}}
                                    <img src="{{user.avatar}}" class="rounded-circle" height="25"
                                        style="width: 50px; height: 50px" alt="Profile Picture">
                                    {{else}}
                                    <img src="images/GoLogoNBg.png" height="25" style="width: 50px; height: 50px"
                                        alt="Profile Picture">
                                    {{/if}}
                                </div>
                                <div>
                                    <span>Nhat Quynh invites you to join the meeting <br> at 1:30 PM on
                                        July 6, 2024
                                    </span>
                                </div>
                            </div>
                        </li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li class="px-3 py-2">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <img src="images/GoLogoNBg.png" height="25" alt="Profile Picture">
                                </div>
                                <div>
                                    <span>Nhat Quynh invites you to join the meeting <br> at 1:30 PM on
                                        July 6, 2024
                                    </span>
                                </div>
                            </div>
                        </li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li class="px-3 py-2">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <img src="images/GoLogoNBg.png" height="25" alt="Profile Picture">
                                </div>
                                <div>
                                    <span>Nhat Quynh declines the invitation to join the meeting <br> at 1:30 PM on July
                                        6,
                                        2024.
                                    </span>
                                </div>
                            </div>
                        </li> --}}
                    </ul>
                    <div class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                            data-bs-toggle="dropdown" aria-expanded="false">
                            <div class="profile-pic" data-bs-toggle="tooltip" data-bs-placement="bottom"
                                title="Profile">
                                {{#if user.avatar}}
                                <img src="{{user.avatar}}" height="30" class="rounded-circle" alt="Profile Picture"
                                    referrerpolicy="no-referrer">
                                {{else}}
                                <img src="images/GoLogoNBg.png" height="30" alt="Profile Picture">
                                {{/if}}
                            </div>
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <li class="px-3 py-2">
                                <div class="d-flex align-items-center">
                                    <div class="me-3" style="width: 50px; height: 50px">
                                        {{#if user.avatar}}
                                        <img src="{{user.avatar}}" style="height: 50px; width: 50px; object-fit: cover;"
                                            class="rounded-circle" alt="Profile Picture" referrerpolicy="no-referrer">
                                        {{else}}
                                        <img src="images/GoLogoNBg.png" height="30" alt="Profile Picture">
                                        {{/if}}
                                    </div>
                                    <div>
                                        <span>{{user.fullName}}<br>
                                            <small>{{user.userEmail}}</small>
                                        </span>
                                    </div>
                                </div>
                            </li>
                            <li><a class="dropdown-item" href="/profile"><i class="bi bi-person-fill pe-2"></i></i>
                                    Account</a>
                            </li>
                            <li><a class="dropdown-item" href="#" data-bs-toggle="modal"
                                    data-bs-target="#settingModal"><i class="bi bi-gear-fill pe-2"></i> Setting</a>
                            </li>
                            <li>
                                <hr class="dropdown-divider">
                            </li>
                            <li><a class="dropdown-item" href="/logout"> Log Out</a>
                            </li>
                        </ul>
                    </div>
                </ul>
            </div>
        </div>
    </nav>

    <div class="content">
        <div class="row m-0">
            <div class="left-box col-9 p-0">
                <div class="row" style="margin-top: 150px">
                    <div class="col d-flex align-items-end flex-column" style="margin: 20px 20px 0 0">
                        <div class="new-meeting" onclick=createMeeting()>
                            <i class="bi bi-camera-video-fill h1"></i>
                        </div>
                        <p>Meeting&emsp;</p>
                        <form action="createMeeting" id="createMeeting" method="post">
                        </form>
                    </div>

                    <div class="col" style="margin: 20px 0 0 20px">
                        <div class="join" data-bs-toggle="modal" data-bs-target="#joinModal"><i
                                class="bi bi-plus-square-fill h1"></i></div>
                        <p>&emsp;&emsp;Join</p>
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col d-flex align-items-end flex-column" style="margin: 10px 20px 0 0">
                        <div class="schedule" data-bs-toggle="modal" data-bs-target="#scheModal"><i
                                class="bi bi-calendar-date-fill h1"></i></div>
                        <p>Schedule&ensp;&nbsp;</p>
                    </div>
                    <div class="col" style="margin: 10px 0 0 20px">
                        <div class="share-screen" data-bs-toggle="modal" data-bs-target="#meetingLater"><i
                                class="bi bi-clock-fill h1"></i></div>
                        <p>Meeting later</p>
                    </div>
                </div>
            </div>
            <div class="col-3 p-0 bg-light right-box" style="min-height: calc(100vh - 70px); ">
                <div id="clockdate">
                    <div class="clockdate-wrapper">
                        <div id="clock"></div>
                        <div id="date"></div>
                    </div>
                </div>
                <div class="d-flex justify-content-between pt-2">
                    <div class="listSche d-flex align-items-center">
                        <input type="date" id="datetime3" class="btn btn-light date ">
                    </div>
                    <div class="pe-4">
                        <button class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#scheModal"><i
                                class="bi bi-calendar2-plus"></i></button>
                    </div>
                </div>
                {{!-- <div class="host">
                    <div class="btn-group">
                        <button class="btn btn-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown"
                            aria-expanded="false">
                            Host: Pham Nhat Quynh
                        </button>
                        <ul class="dropdown-menu">
                            <li class="dropdown-item">Pham Nhat Quynh</li>
                            <li class="dropdown-item">Nhat Quynh Pham xinh nhat a</li>
                            <li class="dropdown-item">Quynh Pham Nhat</li>
                        </ul>
                    </div>
                </div> --}}
                <div class="card-meet">
                    <div class="meeting-schedule" id="meeting-schedule" style="overflow-y: auto; height: 450px">
                        <div class="m-2" id="spinnerLoading">
                            <div class="p-2">
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-center" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card m-2 d-none" id="freeDiv">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-black align-self-center">You are free today. Yahoooo!!!!</small>
                                </div>
                            </div>
                        </div>
                        {{!-- <div class="card m-2">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-danger">Now
                                    </small>
                                    <div class="dropdown">
                                        <i class="bi bi-three-dots-vertical" id="dropdownMenuButton"
                                            data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <a class="dropdown-item" href="#">Edit</a>
                                            <a class="dropdown-item" href="#">Delete</a>
                                        </div>
                                    </div>
                                </div>

                                <h6 class="card-title">Nhat Quynh Pham's meeting</h6>
                                <a href="#" class="btn btn-primary btn-sm">Join</a>
                                <small class="card-text text-secondary">Jun 26 11h:30PM - Jun 27 12h:00AM
                                </small>

                            </div>
                        </div>
                        <div class="card m-2">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-danger">Now
                                    </small>
                                    <div class="dropdown">
                                        <i class="bi bi-three-dots-vertical" id="dropdownMenuButton"
                                            data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <a class="dropdown-item" href="#">Edit</a>
                                            <a class="dropdown-item" href="#">Delete</a>
                                        </div>
                                    </div>
                                </div>

                                <h6 class="card-title">Nhat Quynh Pham's meeting</h6>
                                <a href="#" class="btn btn-primary btn-sm">Join</a>
                                <small class="card-text text-secondary">Jun 26 11h:30PM - Jun 27 12h:00AM
                                </small>

                            </div>
                        </div>
                        <div class="card m-2">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-danger">Now
                                    </small>
                                    <div class="dropdown">
                                        <i class="bi bi-three-dots-vertical" id="dropdownMenuButton"
                                            data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <a class="dropdown-item" href="#">Edit</a>
                                            <a class="dropdown-item" href="#">Delete</a>
                                        </div>
                                    </div>
                                </div>

                                <h6 class="card-title">Nhat Quynh Pham's meeting</h6>
                                <a href="#" class="btn btn-primary btn-sm">Join</a>
                                <small class="card-text text-secondary">Jun 26 11h:30PM - Jun 27 12h:00AM
                                </small>

                            </div>
                        </div>
                        <div class="card m-2">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-danger">Now
                                    </small>
                                    <div class="dropdown">
                                        <i class="bi bi-three-dots-vertical" id="dropdownMenuButton"
                                            data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <a class="dropdown-item" href="#">Edit</a>
                                            <a class="dropdown-item" href="#">Delete</a>
                                        </div>
                                    </div>
                                </div>

                                <h6 class="card-title">Nhat Quynh Pham's meeting</h6>
                                <a href="#" class="btn btn-primary btn-sm">Join</a>
                                <small class="card-text text-secondary">Jun 26 11h:30PM - Jun 27 12h:00AM
                                </small>

                            </div>
                        </div>
                        <div class="card m-2">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-danger">Now
                                    </small>
                                    <div class="dropdown">
                                        <i class="bi bi-three-dots-vertical" id="dropdownMenuButton"
                                            data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <a class="dropdown-item" href="#">Edit</a>
                                            <a class="dropdown-item" href="#">Delete</a>
                                        </div>
                                    </div>
                                </div>

                                <h6 class="card-title">Nhat Quynh Pham's meeting</h6>
                                <a href="#" class="btn btn-primary btn-sm">Join</a>
                                <small class="card-text text-secondary">Jun 26 11h:30PM - Jun 27 12h:00AM
                                </small>

                            </div>
                        </div>
                        <div class="card m-2">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-danger">Now
                                    </small>
                                    <div class="dropdown">
                                        <i class="bi bi-three-dots-vertical" id="dropdownMenuButton"
                                            data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <a class="dropdown-item" href="#">Edit</a>
                                            <a class="dropdown-item" href="#">Delete</a>
                                        </div>
                                    </div>
                                </div>

                                <h6 class="card-title">Nhat Quynh Pham's meeting</h6>
                                <a href="#" class="btn btn-primary btn-sm">Join</a>
                                <small class="card-text text-secondary">Jun 26 11h:30PM - Jun 27 12h:00AM
                                </small>

                            </div>
                        </div>
                        <div class="card m-2">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-danger">Now
                                    </small>
                                    <div class="dropdown">
                                        <i class="bi bi-three-dots-vertical" id="dropdownMenuButton"
                                            data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <a class="dropdown-item" href="#">Edit</a>
                                            <a class="dropdown-item" href="#">Delete</a>
                                        </div>
                                    </div>
                                </div>

                                <h6 class="card-title">Nhat Quynh Pham's meeting</h6>
                                <a href="#" class="btn btn-primary btn-sm">Join</a>
                                <small class="card-text text-secondary">Jun 26 11h:30PM - Jun 27 12h:00AM
                                </small>

                            </div>
                        </div> --}}
                        {{!-- <div class="card m-2">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-danger">1 minutes
                                    </small>
                                    <div class="dropdown">
                                        <i class="bi bi-three-dots-vertical" id="dropdownMenuButton"
                                            data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <a class="dropdown-item" href="#">Edit</a>
                                            <a class="dropdown-item" href="#">Delete</a>
                                        </div>
                                    </div>
                                </div>

                                <h6 class="card-title">Nhat Quynh Pham's meeting</h6>
                                <a href="#" class="btn btn-primary btn-sm">Start</a>
                                <small class="card-text text-secondary">Jun 26 11h:30PM - Jun 27 12h:00AM
                                </small>

                            </div>
                        </div> --}}
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- schedule -->
    <div class="modal fade" id="scheModal" tabindex="-1" aria-labelledby="scheModalLabel" aria-hidden="true">
        <div class="modal-dialog  modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="scheModalLabel">Schedule Meeting</h5>
                    <button type="button" class="btn-close btn-light" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="alert-container1"></div>
                    <div class="mb-3">
                        <label for="meetingName" class="form-label">Meeting Name</label>
                        <input type="text" class="form-control form-control-lg" id="meetingName" required
                            value="{{user.fullName}}'s Go Meeting">
                    </div>
                    <div class="mb-3 d-flex justify-content-between ">
                        <input type="datetime-local" id="datetime1" class="form-control form-control-sm">
                        <p class="m-2">To</p>
                        <input type="datetime-local" id="datetime2" class="form-control form-control-sm">
                    </div>
                    <div>Weekly Schedule (Optional)</div>
                    <div class="list-group row row-cols-4" style="flex-direction: row;">
                        <label class="list-group-item col">
                            <input class="form-check-input form-check-input-create me-1" type="checkbox" value="Monday">
                            Mon
                        </label>
                        <label class="list-group-item col border-top">
                            <input class="form-check-input form-check-input-create me-1" type="checkbox" value="Tuesday">
                            Tue
                        </label>
                        <label class="list-group-item col border-top">
                            <input class="form-check-input form-check-input-create me-1" type="checkbox" value="Wednesday">
                            Wed
                        </label>
                        <label class="list-group-item col border-top">
                            <input class="form-check-input form-check-input-create me-1" type="checkbox" value="Thursday">
                            Thu
                        </label>
                        <label class="list-group-item col">
                            <input class="form-check-input form-check-input-create me-1" type="checkbox" value="Friday">
                            Fri
                        </label>
                        <label class="list-group-item col">
                            <input class="form-check-input form-check-input-create me-1" type="checkbox" value="Saturday">
                            Sat
                        </label>
                        <label class="list-group-item col">
                            <input class="form-check-input form-check-input-create me-1" type="checkbox" value="Sunday">
                            Sun
                        </label>
                        <label class="list-group-item col">
                        </label>
                    </div>

                    <div class="mb-3">
                        <label for="shareinputID" class="form-label">Attendes (Optional)</label>
                        <input type="text" class="form-control" id="attendes" value=""
                            placeholder="Email address, with comma between their email">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="scheduleButton">Create</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="closeCreateScheduleModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <!-- update schedule -->
    <div class="modal fade" id="updateRoomModal" tabindex="-1" aria-labelledby="scheModalLabel" aria-hidden="true">
        <div class="modal-dialog  modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="scheModalLabel">Schedule Meeting</h5>
                    <button type="button" class="btn-close btn-light" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="alert-container2"></div>
                    <div class="mb-3">
                        <label for="meetingName" class="form-label">Meeting Name</label>
                        <input type="text" class="form-control form-control-lg" id="meetingNameValue" required
                            value="{{user.fullName}}'s Go Meeting">
                    </div>
                    <div class="mb-3 d-flex justify-content-between ">
                        <input type="datetime-local" id="startAt" class="form-control form-control-sm">
                        <p class="m-2">To</p>
                        <input type="datetime-local" id="endAt" class="form-control form-control-sm">
                    </div>
                    <div>Weekly Schedule (Optional)</div>
                    <div class="list-group row row-cols-4" style="flex-direction: row;">
                        <label class="list-group-item col">
                            <input class="form-check-input form-check-input-update me-1" type="checkbox" value="Monday">
                            Mon
                        </label>
                        <label class="list-group-item col border-top">
                            <input class="form-check-input form-check-input-update me-1" type="checkbox" value="Tuesday">
                            Tue
                        </label>
                        <label class="list-group-item col border-top">
                            <input class="form-check-input form-check-input-update me-1" type="checkbox" value="Wednesday">
                            Wed
                        </label>
                        <label class="list-group-item col border-top">
                            <input class="form-check-input form-check-input-update me-1" type="checkbox" value="Thursday">
                            Thu
                        </label>
                        <label class="list-group-item col">
                            <input class="form-check-input form-check-input-update me-1" type="checkbox" value="Friday">
                            Fri
                        </label>
                        <label class="list-group-item col">
                            <input class="form-check-input form-check-input-update me-1" type="checkbox" value="Saturday">
                            Sat
                        </label>
                        <label class="list-group-item col">
                            <input class="form-check-input form-check-input-update me-1" type="checkbox" value="Sunday">
                            Sun
                        </label>
                        <label class="list-group-item col">
                        </label>
                    </div>

                    <div class="mb-3">
                        <label for="shareinputID" class="form-label">Attendes (Optional)</label>
                        <input type="text" class="form-control" id="attendeesValue" value=""
                            placeholder="Email address, with comma between their email">
                    </div>
                    <input type="hidden" name="roomIdUpdate" id="roomIdUpdate">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="updateScheduleButton">Update</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="closeUpdateScheduleModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <!-- shareScreen -->
    <div class="modal fade" id="meetingLater" tabindex="-1" aria-labelledby="shareScreenLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="shareScreenLabel">Meeting later</h5>
                    <button type="button" class="btn-close btn-light" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="m-2 text-primary d-none" id="spinnerLoadingLaterMeeting">
                        <div class="p-2">
                            <div class="d-flex justify-content-center">
                                <div class="spinner-border text-center" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3" style="width: 80%" id="laterMeetingTitle">
                        <h4 class="ms-auto me-auto">Create a meeting for later use?</h4>
                    </div>
                    <div class="mb-3 d-none" id="meetingInfo">
                        <h4 class="ms-auto me-auto" style="width: 80%">This is your new meeting infor</h4>
                        <h6 class="ms-auto me-auto" style="width: 80%">This meeting will be in your schedule for the next 6 days.</h6>

                        <div class="border border-1 bg-light d-flex justify-content-center align-items-center mt-2 ms-auto me-auto p-1" style="width: 80%">
                            <span class="text-dark" id="meetingLink">
                                videochatapp.online/abcd-abcd-abcds
                            </span>
                            <button type="button" id="copyButton" class="rounded-circle bg-transparent ms-2"  style="height: 30px; width: 30px;">
                                <i class="bi bi-copy"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="createLaterMeeting">Create</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Join Modal -->
    <div class="modal fade " id="joinModal" tabindex="-1" aria-labelledby="joinModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content" style="border-radius: 10px;">
                <div class="modal-header">
                    <h5 class="modal-title" id="joinModalLabel">Join Meeting</h5>
                    <button type="button" class="btn-close btn-light" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <form id="join-meeting">
                    <div class="modal-body">
                        <div id="alert-container3"></div>
                        <div class="mb-3">
                            <label for="inputID" class="form-label">Meeting ID or link</label>
                            <input type="text" class="form-control" id="meeting-id" required>
                        </div>
                        {{!-- <div class="mb-3">
                            <label for="nameUser" class="form-label">Your name</label>
                            <input type="text" class="form-control" id="nameUser" required>
                        </div> --}}
                        {{!-- <div class="mb-2 form-check">
                            <input type="checkbox" class="form-check-input" id="conAudio">
                            <label class="form-check-label" for="conAudio">Don't connect to audio</label>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="offVideo">
                            <label class="form-check-label" for="offVideo">Turn off my video</label>
                        </div> --}}
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="joinButton"
                            onclick=joinMeeting(event)>Join</button>
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal fade" id="settingModal" tabindex="-1" aria-labelledby="settingModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="settingModalLabel">Settings</h5>
                    <button type="button" class="btn-close btn-light" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-3">
                            <div class="tab">
                                <div class="tab-indicator">

                                </div>
                                <button class="tablinks" onclick="openCity(event, 'Camera')"
                                    id="defaultOpen">Camera</button>
                                <button class="tablinks" onclick="openCity(event, 'Audio')">Audio</button>
                            </div>
                        </div>
                        <div class="col-9">
                            <div id="Camera" class="tabcontent">
                                <div class="">
                                    <h6>Camera Check</h6>
                                    <div class="col-lg-7">
                                        <div class="selectors">
                                            <label for="videoInputSelect">Camera: </label>
                                            <select id="videoInputSelect"></select>
                                        </div>
                                    </div>
                                    <div class="col-lg-5">
                                        <br>
                                        <video id="video" height="150" autoplay></video>

                                    </div>

                                </div>
                            </div>
                            <div id="Audio" class="tabcontent">
                                {{!-- <h6>Audio Test</h6> --}}
                                <div class="selectors mb-2">
                                    <label for="audioInputSelect">Micro:</label>
                                    <select id="audioInputSelect"></select>
                                </div>
                                <div class="d-none">
                                    <button id="start-record-btn" class="btn btn-primary">Start
                                    Recording</button>
                                <button id="stop-record-btn" class="btn btn-primary" disabled>Stop
                                    Recording</button>
                                <br>
                                <br>
                                <h6>Loudspeaker</h6>
                                <button class="btn btn-primary" id="play-back-btn" disabled>Play Back</button>
                                <div id="output" class="hidden">
                                    <p>Recording...</p>
                                </div>
                                <div id="output2" class="hidden">
                                    <p>Playing...</p>
                                </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                        id="changeSourceCloseButton">Close</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="changeSourceButton">Save
                        changes</button>
                </div>
            </div>
        </div>
    </div>
    {{!-- Setting modal --}}

    
<!-- Delete Room Modal -->
<div class="modal fade" id="deleteRoomModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header bg-white">
        <h5 class="modal-title text-dark" id="exampleModalLabel">Delete meeting</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
            Delete <span class="fw-bold" id="textRoomName"></span> ?
      </div>
      <input type="hidden" id="deleteRoomId">
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal" id="deleteRoomButton">DELETE</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
</body>
<script>
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    })
    function joinRoom(roomId) {
        window.location.href = `/${roomId.toString()}`
    }

    const intervalIds = {};
    let today = new Date();
    today = formatDateToYYYYMMDD(today)
    //console.log(today);

    function formatDateToYYYYMMDD(date) {
        if(date){
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0'); 
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
    }

    //console.log(today);

    getSchedule(today);

    $('#datetime3').on("change", function(){
        //console.log($("#datetime3").val());
        Array.from(intervalIds).forEach(id => {
            clearInterval(intervalIds[id]);
        })
        getSchedule($("#datetime3").val());
    })
    //getSchedule()

    function deleteRoom(id){
        $.ajax({
            url: '/deleteRoomById',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                id: id
            }),
            success: function (response) {
                $(`#${id}`).remove();
                //console.log(response)
            },
            error: function (xhr, status, error) {
                console.error('Send error:', xhr.responseText);
            }
        });
    }

    $("#deleteRoomButton").on("click", function (){
        let id = $('#deleteRoomId').val();
        //console.log(id);
        deleteRoom(id);
    })
    function getRoomById(id){
        $.ajax({
            url: '/getRoomById',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                id: id,
            }),
            success: function (response) {
                //console.log(response)
                $('#meetingNameValue').val(response.roomName);
                if(response.startAt){
                    let startAt  = new Date(new Date(response.startAt).getTime() + 7 * 60 * 60 * 1000).toISOString().slice(0, 16);
                    $('#startAt').val(startAt);
                }
                if(response.endAt){
                    let endAt = new Date(new Date(response.endAt).getTime() + 7 * 60 * 60 * 1000).toISOString().slice(0, 16);
                    $('#endAt').val(endAt); 
                }
                let attendees = '';
                response.attendees.forEach(email => {
                    if(email != '{{user.userEmail}}'){
                        //console.log(email)
                        attendees += email;
                        attendees +=","
                    }
                });
                const checkboxes = document.querySelectorAll('.list-group-item .form-check-input-update');
                response.daysOfWeek.forEach(weekDay => {
                    checkboxes.forEach(checkbox => {
                        if (checkbox.value == weekDay) {
                            checkbox.checked = true;
                        }
                });
                })
                //console.log(attendees)
                $('#attendeesValue').val(attendees);
            },
            error: function (xhr, status, error) {
                console.error('Send error:', xhr.responseText);
                return null;
            }
        });
    }
    function getSchedule(date){
        $("#spinnerLoading").removeClass("d-none");
        $('#meeting-schedule > div').slice(2).remove();
        $('#freeDiv').addClass("d-none");
        let day = date;
        $.ajax({
            url: '/getRoomsByDay',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                day: day
            }),
            success: function (response) {
                let data = response;
                if(data.length == 0){
                    $('#freeDiv').removeClass("d-none");
                    $("#spinnerLoading").addClass("d-none");
                    return;
                }
                $("#spinnerLoading").addClass("d-none");
                $('#freeDiv').addClass("d-none");
               data.forEach(room => { 
                    const newSchedule = `
                        <div class="card m-2" id=${room.id}>
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between">
                                    <small class="card-text text-danger" id="${room.roomId}">${(room.endAt && room.startAt) ? (room.endAt) : 'Now' }
                                    </small>
                                    ${room.owner ? `<div class="dropdown">
                                        <i class="bi bi-three-dots-vertical" id="dropdownMenuButton"
                                            data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <a class="dropdown-item edit-button" data-id=${room.id} data-bs-toggle="modal" data-bs-target="#updateRoomModal">Edit</a>
                                            <a class="dropdown-item delete-button" data-id=${room.id} data-roomname="${room.roomName}" data-bs-toggle="modal" data-bs-target="#deleteRoomModal">Delete</a>
                                        </div>
                                    </div>` : '' }
                                </div>

                                <h6 class="card-title">${room.roomName}</h6>
                                <a href="/${room.roomId}" class="btn btn-primary btn-sm">Join</a>
                                <small class="card-text text-secondary">${(room.startAt) ? formateDateTime(room.startAt) : '--' }  -  ${(room.endAt) ? formateDateTime(room.endAt) : '--' }
                                </small>
                            </div>
                        </div>
                    `
                    $('#meeting-schedule').append(newSchedule);

                    const roomId = room.roomId;
                    updateTimeInterval(room.startAt, room.endAt, roomId);
                    let startDay = formatDateToYYYYMMDD(new Date(formateDateTime(room.startAt).split("<span>")[0]))
                    intervalIds[roomId+startDay]  = setInterval(() => {
                        updateTimeInterval(room.startAt, room.endAt, roomId);
                    }, 60000);
               })
               $(".delete-button").on("click", function() {
                    const targetId = $(this).data("id");
                    const roomName = $(this).data("roomname");
                    //console.log(roomName)
                    $('#deleteRoomId').val(targetId);
                    $('#textRoomName').text(roomName);
                });
                 $(".edit-button").on("click", async function() {
                    const targetId = $(this).data("id");
                    let roomData = await getRoomById(targetId);
                    $('#roomIdUpdate').val(targetId);
                    //console.log(targetId)
                });
            },
            error: function (xhr, status, error) {
                console.error('Send error:', xhr.responseText);
            }
        });
    }

    $("#copyButton").on("click", async function (){
        const textToCopy = document.getElementById('meetingLink').innerText.trim();

            try {
                await navigator.clipboard.writeText(textToCopy);
                const tooltip = new bootstrap.Tooltip(document.getElementById('copyButton'), {
                    trigger: 'manual',
                    title: 'Copied!',
                    placement: 'top'
                });
                tooltip.show();
                setTimeout(() => tooltip.hide(), 1000);
            } catch (err) {
                console.error('Failed to copy text: ', err);
                const tooltip = new bootstrap.Tooltip(document.getElementById('copyButton'), {
                    trigger: 'manual',
                    title: 'Failed to copy!',
                    placement: 'top'
                });
                tooltip.show();
                setTimeout(() => tooltip.hide(), 1000);
            }
        });

    const socket = new WebSocket(`{{ws_url}}?token=${encodeURIComponent('{{token}}')}`);
        //const socket = new WebSocket('wss://videochatapp.online');
        
        socket.onmessage = async (message) => {
            const data = JSON.parse(message.data);
            //console.log('Received:', data);
            //console.log(data.exists);
            switch (data.action) {
                case 'checked-result':
                    if (data.exists) {
                        $("#join-meeting").submit();
                    }
                    else {
                        share = false;
                        //alert("Room not found");
                        showAlert('Room not found', 'alert-container3');
                        $("#meeting-id").val("")
                    }
                    break;
                default:
                    console.error('Unknown message type:', data.type);
            }
        };

        function joinMeeting(e) {
            e.preventDefault();
            let parts = $("#meeting-id").val().split("/");

            let meetingId = parts[parts.length - 1];
            //console.log(parts);
            if (meetingId !== "") {
                $("#join-meeting").attr("action", meetingId);
                socket.send(JSON.stringify({ action: 'check-room-existed', roomId: meetingId.trim(), userEmail: "{{user.userEmail}}" }));
                //$("#join-meeting").submit();
            } else {
                showAlert("Please enter a valid meeting ID.", "alert-container3")
            }
        }
        function showAlert(message, container) {
            const alertElement = document.createElement('div');
            alertElement.className = 'alert alert-warning alert-dismissible fade show';
            alertElement.role = 'alert';
            alertElement.innerHTML = `${message} <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;

            document.getElementById(container).appendChild(alertElement);

            setTimeout(() => {
                const alert = document.querySelector('.alert');
                if (alert) {
                    alert.classList.remove('show');
                    alert.classList.add('fade');
                    alert.remove();
                }
            }, 5000);
        }


    $(document).ready(function () {

        const datetime1 = document.getElementById('datetime1');
        const datetime2 = document.getElementById('datetime2');
        const startAt = document.getElementById('startAt');
        const endAt = document.getElementById('endAt');
        function validateDates() {
                const now = new Date().toISOString().slice(0, 16);
                datetime1.setAttribute('min', now);

                if (datetime1.value) {
                    datetime2.setAttribute('min', datetime1.value);
                }
            }

        datetime1.addEventListener('change', validateDates);
        datetime2.addEventListener('change', validateDates);
        startAt.addEventListener('change', validateDates);
        endAt.addEventListener('change', validateDates);
        function convertToISOWithTimezone(datetimeLocal, timezoneOffset) {
            let localDate = new Date(datetimeLocal + timezoneOffset);
            
            let isoString = localDate.toISOString().slice(0, 16) + ':00';
            return isoString + timezoneOffset;;
        }
        $("#updateScheduleButton").on("click", function (){
            const checkboxes = document.querySelectorAll('.list-group-item .form-check-input-update');
            let weekly = [];
            checkboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    weekly.push(checkbox.value);
                }
            });
            //console.log(weekly);
            validateDates();
            if (startAt.value && endAt.value) {
                const date1 = new Date(startAt.value);
                const date2 = new Date(endAt.value);

                if ( date2 <= date1) {
                    event.preventDefault();

                    showAlert('Please ensure that the second date is later than the first.', 'alert-container2')
                }
                else{
                    let roomName = $("#meetingNameValue").val();
                    if(roomName.trim().length == 0){
                        showAlert('Room name is required', 'alert-container2');
                    }


                    //const timezoneOffset = (new Date().getTimezoneOffset() > 0 ? '-' : '+') + 
                    //String(Math.abs(Math.floor(new Date().getTimezoneOffset() / 60))).padStart(2, '0') + ':' + 
                    //String(Math.abs(new Date().getTimezoneOffset() % 60)).padStart(2, '0');

                    //let startAt = convertToISOWithTimezone($('#startAt').val(), timezoneOffset);
                    //let endAt = convertToISOWithTimezone($('#endAt').val(), timezoneOffset);
                    let startAt = $('#startAt').val();
                    let endAt = $('#endAt').val();
                    
                    let daysOfWeek = weekly
                    let attendees = $('#attendeesValue').val();
                    let id = $('#roomIdUpdate').val();
                    updateSchedule(roomName, startAt, endAt, daysOfWeek, attendees, id);

                    $('#closeUpdateScheduleModal').click();
                }
            }
        });

        $("#scheduleButton").on("click", function (){
            const checkboxes = document.querySelectorAll('.list-group-item .form-check-input-create');
            let weekly = [];
            checkboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    weekly.push(checkbox.value);
                }
            });
            validateDates();
            if (datetime1.value && datetime2.value) {
                const date1 = new Date(datetime1.value);
                const date2 = new Date(datetime2.value);

                if (date1 < new Date() || date2 <= date1) {
                    event.preventDefault();
                    showAlert('Please ensure that the first date is in the future and the second date is later than the first.', 'alert-container1')
                    //alert('Please ensure that the first date is in the future and the second date is later than the first.');
                }
                else{
                    let roomName = $("#meetingName").val();
                    if(roomName.trim().length == 0){
                        showAlert('Room name is required', 'alert-container1');
                        return;
                    }
                    let startAt = $("#datetime1").val();
                    let endAt = $("#datetime2").val();
                    let daysOfWeek = weekly
                    let attendees = $('#attendes').val();
                    createSchedule(roomName, startAt, endAt, daysOfWeek, attendees);

                    $('#closeCreateScheduleModal').click();
                }
            }
        })
        function updateSchedule(roomName, startAt, endAt, daysOfWeek, attendees, id){
             $.ajax({
                url: '/updateRoom',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    roomName: roomName,
                    startAt: startAt,
                    endAt: endAt,
                    daysOfWeek: daysOfWeek,
                    attendees: attendees,
                    id: id
                }),
                success: function (response) {
                    console.log(response);
                    let today = new Date();
                    today = formatDateToYYYYMMDD(today)
                    getSchedule(today);
                },
                error: function (xhr, status, error) {
                    console.error('Send error:', xhr.responseText);
                }
            });
        }

        function createSchedule(roomName, startAt, endAt, daysOfWeek, attendees){
             $.ajax({
                url: '/createRoomSchedule',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    roomName: roomName,
                    startAt: startAt,
                    endAt: endAt,
                    daysOfWeek: daysOfWeek,
                    attendees: attendees
                }),
                success: function (response) {
                    console.log(response);
                    let today = new Date();
                    today = formatDateToYYYYMMDD(today)
                    getSchedule(today);
                },
                error: function (xhr, status, error) {
                    console.error('Send error:', xhr.responseText);
                }
            });
        }

        $("#createLaterMeeting").on("click", function(){
            $("#createLaterMeeting").prop("disabled", true);
            $("#laterMeetingTitle").addClass("d-none");
            $("#spinnerLoadingLaterMeeting").removeClass("d-none");
            $.ajax({
                url: '/createLaterMeeting',
                type: 'POST',
                contentType: 'application/json',
                success: function (response) {
                    console.log(response);
                    $("#meetingLink").text(response);
                    $("#meetingInfo").removeClass("d-none");
                    $("#laterMeetingTitle").addClass("d-none");
                    $("#spinnerLoadingLaterMeeting").addClass("d-none");
                    $("#createLaterMeeting").addClass("d-none");
                    let today = new Date();
                    today = formatDateToYYYYMMDD(today)
                    getSchedule(today);
                },
                error: function (xhr, status, error) {
                    console.error('Send error:', xhr.responseText);
                }
            });
        })
        document.getElementById('meetingLater').addEventListener('hidden.bs.modal', () => {
            $("#meetingLink").text("");
            $("#meetingInfo").addClass("d-none");
            $("#laterMeetingTitle").removeClass("d-none");
            $("#createLaterMeeting").removeClass("d-none");
            $("#createLaterMeeting").prop("disabled", false);
        });
        //getSchedule();
        //localStorage.clear();
        const storedDataArrayString = localStorage.getItem('invitations');

        const storedDataArray = storedDataArrayString ? JSON.parse(storedDataArrayString) : []
        if (storedDataArray.length > 0) {
            const check = storedDataArray[0];
            if (check.to != "{{user.userEmail}}") {
                return;
            }
            $("#emptyNotiLi").addClass("d-none");
            const ul = document.getElementById("ulInvitations");
            storedDataArray.forEach(invitation => {
                const div = `
                    <li class="px-3 py-2" onclick="joinRoom('${invitation.roomId}')">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <img src="${invitation.fromUserAvatar ? invitation.fromUserAvatar : 'images/GoLogoNBg.png'}" class="rounded-circle" height="25" style="width: 50px; height: 50px" alt="Profile Picture" referrerpolicy="no-referrer">
                            </div>
                            <div>
                                <span>${invitation.from} invites you to join the meeting <br> at ${invitation.time} on
                                        ${invitation.date}</span>
                            </div>
                        </div>
                    </li>
                `;
                ul.insertAdjacentHTML('beforeend', div);
            })
        }
    })
    let per = false;
    var refreshing;
    const newMessage = localStorage.getItem('newMessage');
    //console.log(newMessage)
    if (newMessage == "true") {
        $("#new-noti-green").removeClass("d-none");
    }
    if (navigator.serviceWorker) {
        navigator.serviceWorker.addEventListener('message', event => {
            if (event.data && event.data.type === 'push-notification') {
                const data = event.data.data;
                console.log("Received data from Service Worker:", data);
                const { from, roomId, to, fromUserAvatar } = data;
                if (to != "{{user.userEmail}}") {
                    return;
                }
                $("#new-noti-green").removeClass("d-none");
                $("#emptyNotiLi").addClass("d-none");

                localStorage.setItem('newMessage', true);

                const storedDataArrayString = localStorage.getItem('invitations');

                const storedDataArray = storedDataArrayString ? JSON.parse(storedDataArrayString) : [];

                const now = new Date();
                const formattedDate = `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;
                const formattedTime = `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;
                const date = formattedDate
                const time = formattedTime

                storedDataArray.unshift({ from, roomId, to, fromUserAvatar, date, time });
                localStorage.setItem('invitations', JSON.stringify(storedDataArray));

                const div = `
                    <li class="px-3 py-2" onclick="joinRoom('${roomId}')">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <img src="${fromUserAvatar ? fromUserAvatar : 'images/GoLogoNBg.png'}" class="rounded-circle" height="25" style="width: 50px; height: 50px" alt="Profile Picture">
                            </div>
                            <div>
                                <span>${from} invites you to join the meeting <br> at ${formattedTime} on
                                        ${formattedDate}</span>
                            </div>
                        </div>
                    </li>
                `;
                const ul = document.getElementById("ulInvitations");
                ul.insertAdjacentHTML('afterbegin', div);

                //updateUIWithNotification(data);
            }
        });

    }
    else {
        console.log("Khong tim thay service WOrker")
    }
    async function checkAndRegisterForPushNotifications(registration) {
        try {
            const subscription = await registration.pushManager.getSubscription();
            if (subscription) {
                console.log("Client is already subscribed:", subscription);
                try {
                    const getSub = await getSubscription(subscription.endpoint);
                    console.log(getSub);
                    if (!getSub.status) {
                        await registerForPushNotifications(registration);
                    }
                } catch (error) {
                    console.error('Error during subscription check or registration:', error);
                }
            } else {
                try {
                    await registerForPushNotifications(registration);
                } catch (error) {
                    console.error('Error during registration:', error);
                }
            }
        } catch (error) {
            console.error('Error checking subscription:', error);
        }
    }
    async function registerForPushNotifications(registration) {
        try {
            const subscription = await registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: urlBase64ToUint8Array("BCGeLzc1iyki17jIBjFxi351V6ttBrrBNpimnbw8mifWJG8x92l0G5s1fr4H2XtBjQ60rwxkd2rvjt-4TqvNqng")
            });
            const response = await saveSubscription(subscription)
            console.log(response)

            window.location.reload();
            navigator.serviceWorker.addEventListener('controllerchange',
                function () {
                    if (refreshing) return;
                    refreshing = true;
                    window.location.reload();
                })

            console.log("Push subscription registered successfully:", subscription);
        } catch (error) {
            console.error('Failed to subscribe to push notifications:', error);
            $("#emptyNotiLi").addClass("d-none");
            $("#blockNotiLi").removeClass("d-none");
        }
    }


    const checkPermission = () => {
        if (!('serviceWorker' in navigator)) {
            throw new Error("No support for service worker!")
        }

        if (!('Notification' in window)) {
            throw new Error("No support for notification API");
        }

        if (!('PushManager' in window)) {
            throw new Error("No support for Push API")
        }
    }

    const registerSW = async () => {
        const registration = await navigator.serviceWorker.register('./service-worker.js');
        return registration;
    }

    const urlBase64ToUint8Array = base64String => {
        const padding = '='.repeat((4 - (base64String.length % 4)) % 4);
        const base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');

        const rawData = atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }

        return outputArray;
    }

    const saveSubscription = async (subscription) => {
        const response = await fetch('/saveSubscription', {
            method: 'post',
            headers: { 'Content-type': "application/json" },
            body: JSON.stringify({
                subscription: subscription,
                userEmail: "{{user.userEmail}}"
            })
        })

        return response.json()
    }

    const getSubscription = async (endpoint) => {
        const response = await fetch('/getSubscription', {
            method: 'POST',
            headers: { 'Content-Type': "application/json" },
            body: JSON.stringify({
                endpoint: endpoint,
                userEmail: "{{user.userEmail}}"
            })
        });
        return response.json();
    }


    async function requestNotificationPermission() {
        const permission = await Notification.requestPermission();

        if (permission !== 'granted') {
            $("#blockNotiLi").removeClass("d-none");
            $("#emptyNotiLi").addClass("d-none");
            throw new Error("Notification permission not granted")
        }
        else {
            //$("#emptyNotiLi").removeClass("d-none");
            $("#blockNotiLi").addClass("d-none");
        }
    }

    const getPermission = async () => {
        console.log("GET")
        localStorage.setItem('newMessage', false);
        $("#new-noti-green").addClass("d-none");
        checkPermission()
        await requestNotificationPermission();
        await registerSW().then(registration => {
            console.log('Service Worker registered with scope:', registration.scope);

            if (navigator.serviceWorker.controller) {
                checkAndRegisterForPushNotifications(registration);
            } else {
                navigator.serviceWorker.addEventListener('controllerchange', () => {
                    if (navigator.serviceWorker.controller) {
                        checkAndRegisterForPushNotifications(registration);
                    }
                });
            }
        }).catch(error => {
            console.error('Service Worker registration failed:', error);
        });
    }

    function createMeeting() {
        $("#createMeeting").submit();
        localStorage.setItem("micEnabled", true);
        localStorage.setItem("cameraEnabled", true);
    }
    document.addEventListener('DOMContentLoaded', function () {
        const now = new Date();
        const timezoneOffset = now.getTimezoneOffset() * 60000;
        const localTime = new Date(now.getTime() + 5*60000 - timezoneOffset);
        const formattedDate = localTime.toISOString().slice(0, 16);
        const nowPlus30Minutes = new Date(localTime.getTime() + 30 * 60000);
        const formattedDate2 = nowPlus30Minutes.toISOString().slice(0, 16);
        document.getElementById('datetime1').value = formattedDate;
        document.getElementById('datetime2').value = formattedDate2;
        const today = localTime.toISOString().split('T')[0];
        document.getElementById('datetime3').value = today;
    });
    //clock
    function startTime() {
        var today = new Date();
        var hr = today.getHours();
        var min = today.getMinutes();
        var sec = today.getSeconds();
        ap = (hr < 12) ? "<span>AM</span>" : "<span>PM</span>";
        hr = (hr == 0) ? 12 : hr;
        hr = (hr > 12) ? hr - 12 : hr;
        hr = checkTime(hr);
        min = checkTime(min);
        sec = checkTime(sec);
        document.getElementById("clock").innerHTML = hr + ":" + min + ":" + sec + " " + ap;

        var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        var curWeekDay = days[today.getDay()];
        var curDay = today.getDate();
        var curMonth = months[today.getMonth()];
        var curYear = today.getFullYear();
        var date = curWeekDay + ", " + curDay + " " + curMonth + " " + curYear;
        document.getElementById("date").innerHTML = date;

        var time = setTimeout(function () { startTime() }, 500);
    }
    function formatTimeDifference(milliseconds) {
        let totalMinutes = Math.floor(milliseconds / (1000 * 60));
        
        let days = Math.floor(totalMinutes / (60 * 24));
        let hours = Math.floor((totalMinutes % (60 * 24)) / 60);
        let minutes = totalMinutes % 60;
        
        let result = '';
        if (days > 0) {
            result += `${days} days `;
        }
        if (hours > 0) {
            result += `${hours} hours `;
        }
        result += `${minutes} minutes`;
        
        return result.trim();
    }
    
    function updateTimeInterval(start, end, id) {
        let now = new Date();

        let startDay;
        if (start) {
            start = new Date(start);
            startDay = formatDateToYYYYMMDD(start)
        }
        if (end) {
            end = new Date(end);
        }
        const element = document.getElementById(id);

        if (element) {
            if(!start){
                element.textContent = '---';
                clearInterval(intervalIds[id]); 
            }
            else if (now > start) {
                if(end){
                    if(now < end){
                        const minutes = formatTimeDifference(now - start);
                        element.textContent = `Now`;
                    }
                    else{
                        element.textContent = 'End';
                        clearInterval(intervalIds[id+startDay]);
                    }
                }
                else{
                    element.textContent = 'Now';
                    clearInterval(intervalIds[id+startDay]);; 
                }
            } else if (now < start) {
                const minutes = formatTimeDifference(start - now);
                element.textContent = `Start in ${minutes}`;
            }
        } else {
            console.error(`Không tìm thấy thẻ với id ${id}`);
        }
    }

    function formateDateTime(datetime){
        datetime = new Date(datetime)
        let formatted = '';
        var hr = datetime.getHours();
        var min = datetime.getMinutes();
        let ap = (hr < 12) ? "<span>AM</span>" : "<span>PM</span>";
        hr = (hr == 0) ? 12 : hr;
        hr = (hr > 12) ? hr - 12 : hr;
        hr = checkTime(hr);
        min = checkTime(min);
        time = hr + ":" + min + " "+ ap
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var curDay = datetime.getDate();
        var curMonth = months[datetime.getMonth()];
        var curYear = datetime.getFullYear();
        var date = curMonth + " " + curDay + " "

        formatted = date + time;
        return formatted;
    }
    function checkTime(i) {
        if (i < 10) {
            i = "0" + i;
        }
        return i;
    }
    startTime();

    //input Join
    document.addEventListener('DOMContentLoaded', function () {
        const inputID = document.getElementById('meeting-Id');
        //const nameUser = document.getElementById('nameUser');
        const joinButton = document.getElementById('joinButton');

        function toggleJoinButton() {
            //joinButton.disabled = !(inputID.value.trim());
        }

        //inputID.addEventListener('input', toggleJoinButton);
        //nameUser.addEventListener('input', toggleJoinButton);
        toggleJoinButton();
    });

    //input Share
    /*document.addEventListener('DOMContentLoaded', function () {
        const shareinputID = document.getElementById('meeting-share-id');
        const shareButton = document.getElementById('shareButton');

        function toggleShareButton() {
            shareButton.disabled = !(shareinputID.value.trim());
        }
        shareinputID.addEventListener('input', toggleShareButton);
        toggleShareButton();
    });*/
    //input Schedule

    function openCity(evt, cityName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(cityName).style.display = "block";
        evt.currentTarget.className += " active";
    }
    document.getElementById("defaultOpen").click();

    //camera
    const videoElement = document.getElementById('video');
    const videoInputSelect = document.getElementById('videoInputSelect');

    const audioInputSelect = document.getElementById('audioInputSelect');

    async function checkVideoDeviceConstraints(videoConstraints) {
        try {
            const devices = await navigator.mediaDevices.enumerateDevices();
            const videoInputs = devices.filter(device => device.kind === 'videoinput');
            videoInputSelect.innerHTML = '';
            videoInputs.forEach(deviceInfo => {
                if (deviceInfo.kind === 'videoinput') {
                    const option = document.createElement('option');
                    option.value = deviceInfo.deviceId;
                    option.text = deviceInfo.label || `Camera ${videoInputSelect.length + 1}`;
                    videoInputSelect.appendChild(option);
                }
            });
            videoConstraints = JSON.parse(videoConstraints);
            let videoDeviceExists
            if (videoConstraints && videoConstraints.deviceId) {
                videoDeviceExists = devices.some(device =>
                    device.kind === 'videoinput' && device.deviceId === videoConstraints.deviceId.exact
                )
            }
            else {
                videoDeviceExists = false;
            }

            return videoDeviceExists;
        } catch (error) {
            console.error("Error checking device constraints:", error);
            return false;
        }
    }
    async function checkAudioDeviceConstraints(audioConstraints) {
        try {
            const devices = await navigator.mediaDevices.enumerateDevices();

            const audioInputs = devices.filter(device => device.kind === 'audioinput');
            audioInputSelect.innerHTML = '';
            audioInputs.forEach(deviceInfo => {
                if (deviceInfo.kind === 'audioinput') {
                    const option = document.createElement('option');
                    option.value = deviceInfo.deviceId;
                    option.text = deviceInfo.label || `Micro ${audioInputSelect.length + 1}`;
                    audioInputSelect.appendChild(option);
                }
            });
            audioConstraints = JSON.parse(audioConstraints);
            let audioDeviceExists;
            if (audioConstraints && audioConstraints.deviceId) {
                audioDeviceExists = devices.some(device =>
                    device.kind === 'audioinput' && device.deviceId === audioConstraints.deviceId.exact
                );
            }
            else {
                audioDeviceExists = false;
            }

            return audioDeviceExists;
        } catch (error) {
            console.error("Error checking device constraints:", error);
            return false;
        }
    }

    function start() {
        if (window.stream) {
            window.stream.getTracks().forEach(track => {
                track.stop();
            });
        }

        const videoSource = videoInputSelect.value;
        const constraints = {
            video: { deviceId: videoSource ? { exact: videoSource } : undefined }
        };

        navigator.mediaDevices.getUserMedia(constraints).then(gotStream).catch(handleError);
    }

    function gotStream(stream) {
        window.stream = stream;
        if(videoElement.srcObject){
            let streamStoped = videoElement.srcObject;
            streamStoped.getVideoTracks()[0].stop();
            //videoElement.srcObject.getTracks().forEach(track => track.stop());
            videoElement.srcObject = null;
        }
        videoElement.srcObject = stream;
    }

    function handleError(error) {
        console.error('Error: ', error);
    }

    videoInputSelect.onchange = start;

    $("#settingsButton").on("click", async () => {
        try {
            await navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(async (stream) => {
                stream.getAudioTracks()[0].stop();
                stream.getVideoTracks()[0].stop();  
                let videoConstraints = localStorage.getItem("videoConstraints");
                console.log(videoConstraints);
                const videoDeviceExists = await checkVideoDeviceConstraints(videoConstraints)
                if (videoDeviceExists) {
                    let deviceId = JSON.parse(videoConstraints).deviceId.exact;
                    for (let option of videoInputSelect.options) {
                        if (option.value === deviceId) {
                            console.log("GIONG", option.value)
                            videoInputSelect.value = option.value;
                            break;
                        }
                    }
                }
                let audioConstraints = localStorage.getItem("audioConstraints");
                console.log(audioConstraints);
                const audioDeviceExists = await checkAudioDeviceConstraints(audioConstraints);
                if (audioDeviceExists) {
                    let deviceId = JSON.parse(audioConstraints).deviceId.exact;
                    for (let option of audioInputSelect.options) {
                        if (option.value === deviceId) {
                            audioInputSelect.value = option.value;
                            break;
                        }
                    }
                }
                start();
            });
        } catch (error) {
            handleError(error);
        }
    });

    document.getElementById('settingModal').addEventListener('hidden.bs.modal', () => {
        if (window.stream) {
            window.stream.getTracks().forEach(track => {
                track.stop();
            });
        }
    });

    //audio

    let audioContext;
    let recorder;
    let audioChunks = [];
    var recording = document.getElementById('output');
    var playing = document.getElementById('output2');
    var playback = document.getElementById('play-back-btn');
    var startbtn = document.getElementById('start-record-btn');
    var stopbtn = document.getElementById('stop-record-btn');

    let activeStream = null; // Để lưu trữ stream hiện tại

    startbtn.addEventListener('click', async () => {
        let audioElements = Array.from(document.querySelectorAll('audio'));
        console.log('Existing audio elements before removal:', audioElements.length);

        audioElements.forEach(audio => {
            if (audio) {
                if (!audio.paused) {
                    audio.pause();
                }
                audio.currentTime = 0;
                audio.remove();
            }
        });

        audioElements = document.querySelectorAll('audio');
        console.log('Audio elements after removal:', audioElements.length);

        console.log("audioElements after removal: ", audioElements);
        console.log("chunks: ", audioChunks);
        console.log("audio element: ", audioElements);

        // Khởi tạo ghi âm mới
        let audioConstraints = localStorage.getItem("audioConstraints");
        console.log(audioConstraints);
        console.log(audioInputSelect.value)

        let constraint = { deviceId: { exact: audioInputSelect.value } }
        if (audioContext && audioContext.state !== 'closed') {
            audioContext.close();
        }
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const stream = await navigator.mediaDevices.getUserMedia({ audio: constraint });
        const input = audioContext.createMediaStreamSource(stream);
        recorder = new MediaRecorder(stream);
        activeStream = stream;

        recorder.ondataavailable = event => {
            audioChunks.push(event.data);
            console.log(audioChunks);
        };

        recorder.onstop = () => {
            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
            audioChunks = [];
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            document.body.appendChild(audio);
            playback.disabled = false;
            playing.classList.add('hidden');

            playback.addEventListener('click', () => {
                audio.play();
                playing.classList.remove('hidden');
            });
        };

        recorder.start();
        startbtn.disabled = true;
        playback.disabled = true;
        stopbtn.disabled = false;
        recording.classList.remove('hidden');
        playing.classList.add('hidden');
    });

    stopbtn.addEventListener('click', () => {
        if (recorder && recorder.state !== 'inactive') {
            recorder.stop();
        }
        if (audioContext && audioContext.state !== 'closed') {
            audioContext.close();
        }
        if (activeStream) {
            activeStream.getTracks().forEach(track => track.stop());
            activeStream = null;
        }
        startbtn.disabled = false;
        stopbtn.disabled = true;
        recording.classList.add('hidden');
    });

    document.getElementById('settingModal').addEventListener('hidden.bs.modal', () => {
        if (recorder && recorder.state !== 'inactive') {
            recorder.stop();
            audioContext.close();
            if (activeStream) {
                activeStream.getTracks().forEach(track => track.stop());
                activeStream = null;
            }
        }
        const audioElements = document.querySelectorAll('audio');
        audioElements.forEach(audio => {
            if (!audio.paused) {
                audio.pause();
                audio.currentTime = 0;
            }
        });

        if(window.stream){
            let stream = window.stream;
            stream.getTracks().forEach(track => track.stop());
            stream = null;
        }

        if(videoElement.srcObject){
            console.log("EXIST");
            let stream = videoElement.srcObject;
            stream.getVideoTracks()[0].stop();
            //videoElement.srcObject.getTracks().forEach(track => track.stop());
            videoElement.srcObject = null;
        }

        audioChunks = [];

        startbtn.disabled = false;
        playback.disabled = true;
        stopbtn.disabled = true;
        recording.classList.add('hidden');
        playing.classList.add('hidden');
        console.log("CLOSE");
    });

    $("#changeSourceButton").on("click", function(){
        let audioDeviceId = audioInputSelect.value;
        let audioConstraints = {
            deviceId: { exact: audioDeviceId }
        }

        localStorage.setItem("audioConstraints", JSON.stringify(audioConstraints));

        let videoDeviceId = videoInputSelect.value;
        let videoConstraints = {
            deviceId: { exact: videoDeviceId }
        }

        localStorage.setItem("videoConstraints", JSON.stringify(videoConstraints));
    })

</script>

</html>