<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GoChat</title>
     <link rel="icon" href="/images/GoLogoNBg.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.min.css">

    <style>
        * {
            box-sizing: border-box;
        }

        html,
        body {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;

            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        .overlay {
            position: absolute;
            left: 0;
            width: 100%;
            height: 20%;
            pointer-events: none;
        }

        .overlay.top {
            top: 0;
            background: linear-gradient(to bottom, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0));
        }

        .overlay.bottom {
            bottom: 0;
            background: linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0));
            z-index: 1;
        }

        .buttons:hover {
            width: 50px;
            height: 50px;
            border-radius: 25px;
            background-color: #dfdcdc;
        }

        .buttons {
            width: 50px;
            height: 50px;
            border-radius: 25px;
            background-color: transparent;
            border: 1px solid white;
        }

        .device-options {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            background-color: transparent;
            border: 1px solid transparent;
            transition: background-color 0.3s, border 0.3s;
        }

        .device-options:hover {
            background-color: #dff3ff;
            border: 1px solid rgb(201, 201, 201)
        }
    </style>
</head>

<body>
    <div class="container-fluid vh-100 d-flex flex-column p-0 m-0">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            {{!-- <button onclick="sendMessage('123', '{{user.userEmail}}', 'user1@gmail.com')">SEND MESSAGE</button>
            --}}
            <div class="container-fluid">
                <a class="navbar-brand" href="/">
                    <img src="images/GoChatHo.png" alt="" height="30">
                </a>
                <div class="row me-3">
                    <div class="col-12 col-sm-10 text-end">
                        <p class="d-sm-block p-0 m-0 fw-semibold">{{user.fullName}}</p>
                        <p class="d-sm-block p-0 m-0">{{user.userEmail}}</p>
                    </div>
                    <div class="profile-pic col-sm-2 align-self-center d-none d-sm-block">
                        {{#if user.avatar}}
                        <img src="{{user.avatar}}" height="30" class="rounded-circle" alt="Profile Picture">
                        {{else}}
                        <img src="images/GoLogoNBg.png" height="30" alt="Profile Picture">
                        {{/if}}
                    </div>
                </div>
            </div>
        </nav>
        <div class="main container my-auto">
            <div class="row">
                <div class="col-12 col-sm-8 justify-content-center">
                    <div class="row justify-content-center">
                        <div class="col-12 col-lg-8">
                            <div class="card p-0" style="width: 100%; max-width: 700px; border-radius: 25px;">
                                <div class="card-body d-flex flex-column p-0 position-relative">
                                    <h5 class="card-title text-white z-3 position-absolute ps-5 pt-5">{{user.fullName}}
                                    </h5>
                                    <h5 id="camera-off-text"
                                        class="text-white z-3 position-absolute top-50 start-50 translate-middle d-none">
                                        Camera is being off</h5>
                                    <div class="flex-grow-1 d-flex">
                                        <video id="videoPreview" autoplay disablePictureInPicture height="320"
                                            style="width:100%; border-radius: 25px;"></video>
                                        <div class="overlay top"
                                            style="border-top-left-radius: 25px; border-top-right-radius: 25px;"></div>
                                        <div class="overlay bottom"
                                            style="border-bottom-left-radius: 25px; border-bottom-right-radius: 25px;">
                                        </div>
                                    </div>
                                    <div
                                        class="d-flex justify-content-center align-items-center z-3 position-absolute bottom-0 start-50 translate-middle">
                                        {{!-- <button id="joinButton" class="btn btn-primary btn-block mt-3 me-3"
                                            style="width: 50px, height:50px">

                                        </button>
                                        <button id="joinButton" class="btn btn-primary btn-block mt-3 ms-3">

                                        </button> --}}
                                        <button id="micButton" class="buttons ms-3">
                                            <i id="micIcon" class="bi bi-mic text-white fs-5"></i>
                                        </button>
                                        <button id="webcamButton" class="buttons ms-3">
                                            <i id="webcamIcon" class="bi bi-camera-video text-white fs-5"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row row-cols-1 row-cols-sm-4 row-cols-lg-5 d-flex pt-2 justify-content-center me-2">
                        <div class="col text-start me-2 btn-group dropup">
                            <button id="micButtonDropdown"
                                class="device-options d-flex rounded-pill align-items-center dropdown-toggle"
                                data-bs-toggle="dropdown" aria-expanded="false" style="width: 150px;">
                                <i class="bi bi-mic fs-5 pe-2"></i>
                                <p class="device-options p-0 m-0 text-center border-0" id="microphoneCurrent">Microphone
                                </p>
                            </button>
                            <ul class="dropdown-menu" id="micDropdownMenu"></ul>
                        </div>

                        {{!-- <div class="col text-start me-2 btn-group dropup">
                            <button id="speakerButtonDropdown"
                                class="device-options d-flex rounded-pill align-items-center dropdown-toggle"
                                data-bs-toggle="dropdown" aria-expanded="false" style="width: 150px;">
                                <i class="bi bi-volume-up fs-5 pe-2"></i>
                                <p class="device-options p-0 m-0 text-center border-0">Speaker</p>
                            </button>
                            <ul class="dropdown-menu" id="speakerDropdownMenu"></ul>
                        </div> --}}

                        <div class="col text-start me-2 btn-group dropup">
                            <button id="cameraButtonDropdown"
                                class="device-options d-flex rounded-pill align-items-center dropdown-toggle"
                                data-bs-toggle="dropdown" aria-expanded="false" style="width: 150px;">
                                <i class="bi bi-camera-video fs-5 pe-2"></i>
                                <p class="device-options p-0 m-0 text-center border-0" id="cameraCurrent">Camera</p>
                            </button>
                            <ul class="dropdown-menu" id="cameraDropdownMenu"></ul>
                        </div>

                    </div>
                </div>
                <div class="col-12 col-sm-3 justify-content-center p-3">
                    <div id="actionContainer">
                        <div class="row mb-1">
                            <div class="col">
                                <p class="fs-2 p-0 m-0">Ready to join?</p>
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col">
                                <p class="fs-5 p-0 m-0">There are {{usersNumber}} people on this room.</p>
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col">
                                <form action="" method="post" id="requestForm">
                                    <input type="hidden" name="roomId" value="{{roomId}}">
                                    <input type="hidden" id="isApprovedInput" name="isApproved" value="false">
                                </form>
                                <button type="button" id="joinButton"
                                    class="btn btn-primary text-white border border-1 rounded-pill p-3"
                                    style="width: 300px; height:70px">
                                    <span id="joinText" class="fw-bold fs-6">
                                        {{#ifEqual isApproved true}}
                                        JOIN
                                        {{else}}
                                        REQUEST
                                        {{/ifEqual}}
                                    </span>
                                    <div class="spinner-border text-light d-none" role="status" id="loadingJoin">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div id="declineContainer" class="d-none">
                        <p class="fs-6 fw-bold">Someone had declined your request.</p>
                        <button type="button" class="btn btn-primary" onclick=returnToHome()>Return to home
                            page</button>
                    </div>
                </div>
            </div>
        </div>
        <input type="hidden" id="userEmailHidden" value="{{user.userEmail}}">
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>


    <script>

        function returnToHome() {
            window.location.href = "/";
        }
        $(document).ready(function () {
            const ws_url = "{{ws_url}}";
            const ws = new WebSocket(ws_url);
            ws.onmessage = async (message) => {
                const data = JSON.parse(message.data);
                console.log('Received:', data);
                // console.log(data.exists);
                switch (data.action) {
                    case 'requestResponse':
                        if (data.isApproved) {
                            //return res.redirect('/' + roomId.trim());
                            $("#isApprovedInput").val(data.isApproved);
                            $("#requestForm").submit();
                        }
                        else {
                            $("#actionContainer").addClass("d-none");
                            $("#declineContainer").removeClass("d-none");
                            // console.log("Room not found");
                            //return res.redirect('/');
                        }
                        break;
                    default:
                        console.error('Unknown message action:', data.action);
                }
            };
            $("#joinButton").on("click", function () {
                $("#joinButton").prop("disabled", true);
                $("#joinText").addClass("d-none");
                $("#loadingJoin").removeClass("d-none");
                ws.send(JSON.stringify({ action: 'requestJoin', roomId: "{{roomId}}", email: "{{user.userEmail}}", name: "{{user.fullName}}" }));
            });
        })
        document.addEventListener('DOMContentLoaded', async (event) => {

            localStorage.setItem("cameraEnabled", true);
            localStorage.setItem("micEnabled", true);
            const videoPreview = document.getElementById('videoPreview');
            let audioConstraints = localStorage.getItem("audioConstraints");
            let videoConstraints = localStorage.getItem("videoConstraints");
            console.log(audioConstraints, videoConstraints)
            let constraints = { video: true, audio: true };
            if (audioConstraints) {
                constraints.audio = JSON.parse(audioConstraints)
            }
            if (videoConstraints) {
                constraints.video = JSON.parse(videoConstraints)
            }
            console.log(constraints)
            //const devices = await navigator.mediaDevices.enumerateDevices();
            checkDeviceConstraints(audioConstraints, videoConstraints).then(async result => {
                console.log('Audio device exists:', result.audioDeviceExists);
                console.log('Video device exists:', result.videoDeviceExists);
                if (!result.audioDeviceExists) {
                    constraints.audio = true;
                }
                if (!result.videoDeviceExists) {
                    constraints.video = true;
                }
                console.log(constraints)

                let audioStreamPromise = navigator.mediaDevices.getUserMedia({ audio: audioConstraints ? JSON.parse(audioConstraints) : true });
                let videoStreamPromise = navigator.mediaDevices.getUserMedia({ video: videoConstraints ? JSON.parse(videoConstraints) : true });

                let audioStream = null;
                let videoStream = null;

                try {
                    audioStream = await audioStreamPromise;
                } catch (error) {
                    disableButton("audio", micButton);
                    console.warn('Audio permission denied or other issue:', error);
                }
                try {
                    videoStream = await videoStreamPromise;
                } catch (error) {
                    disableButton("video", webcamButton);
                    console.warn('Video permission denied or other issue:', error);
                }

                // Create a combined stream if both streams are available
                const combinedStream = new MediaStream();
                if (audioStream) {
                    audioStream.getAudioTracks().forEach(track => combinedStream.addTrack(track));
                }
                if (videoStream) {
                    videoStream.getVideoTracks().forEach(track => combinedStream.addTrack(track));
                }
                window.stream = combinedStream;
                videoPreview.srcObject = combinedStream;
                videoPreview.play();
                const videoTrack = stream.getVideoTracks()[0];
                const audioTrack = stream.getAudioTracks()[0];

                if (videoTrack) {
                    console.log('Video Track Device ID:', videoTrack.label);

                    $("#cameraCurrent").text(videoTrack.label);

                    let dropdownMenu = document.getElementById("cameraDropdownMenu");

                    const items = dropdownMenu.querySelectorAll('.dropdown-item');
                    items.forEach(item => {
                        console.log(item.textContent)
                        if (item.textContent.trim() === videoTrack.label) {
                            item.classList.add('active');
                        }
                    });

                }
                if (audioTrack) {
                    console.log('Audio Track Device ID:', audioTrack.label);

                    $("#microphoneCurrent").text(audioTrack.label);

                    let dropdownMenu = document.getElementById("micDropdownMenu");

                    const items = dropdownMenu.querySelectorAll('.dropdown-item');
                    items.forEach(item => {
                        if (item.textContent.trim() === audioTrack.label) {
                            item.classList.add('active');
                        }
                    });
                }
            })
                .catch(function (error) {

                    console.error('Error when accessing devices:', error);
                    //constraints = {video: true, audio: true};

                });
            /*if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia(constraints)
                .then(async function (stream) {

                    window.stream = stream;
                    videoPreview.srcObject = stream;
                    videoPreview.play();
                    //const devices = await navigator.mediaDevices.enumerateDevices();
          

                    const videoTrack = stream.getVideoTracks()[0];
                    const audioTrack = stream.getAudioTracks()[0];

                    if (videoTrack) {
                        console.log('Video Track Device ID:', videoTrack.label);

                        $("#cameraCurrent").text(videoTrack.label);

                        let dropdownMenu = document.getElementById("cameraDropdownMenu");

                        const items = dropdownMenu.querySelectorAll('.dropdown-item');
                        items.forEach(item => {
                            console.log(item.textContent)
                            if (item.textContent.trim() === videoTrack.label) {
                                item.classList.add('active');
                            }
                        });

                    }
                    if (audioTrack) {
                        console.log('Audio Track Device ID:', audioTrack.label);

                        $("#microphoneCurrent").text(audioTrack.label);

                        let dropdownMenu = document.getElementById("micDropdownMenu");

                        const items = dropdownMenu.querySelectorAll('.dropdown-item');
                        items.forEach(item => {
                            if (item.textContent.trim() === audioTrack.label) {
                                item.classList.add('active');
                            }
                        });
                    }
                })
                .catch(function (error) {

                    console.error('Error when accessing devices:', error);
                    //constraints = {video: true, audio: true};

                });
        } else {
            alert('Sorry, your browser does not support getUserMedia');
        }*/

            async function checkDeviceConstraints(audioConstraints, videoConstraints) {
                try {
                    const devices = await navigator.mediaDevices.enumerateDevices();

                    const audioInputs = devices.filter(device => device.kind === 'audioinput');
                    //const audioOutputs = devices.filter(device => device.kind === 'audiooutput');
                    const videoInputs = devices.filter(device => device.kind === 'videoinput');
                    if (audioInputs.length > 0) {
                        console.log(audioInputs)
                        populateDropdown('micDropdownMenu', audioInputs, 'micButtonDropdown');
                    }
                    if (videoInputs.length > 0) {
                        console.log(videoInputs)
                        populateDropdown('cameraDropdownMenu', videoInputs, 'cameraButtonDropdown');
                    }

                    //populateDropdown('speakerDropdownMenu', audioOutputs, 'speakerButtonDropdown');


                    console.log(JSON.parse(videoConstraints), JSON.parse(audioConstraints))
                    videoConstraints = JSON.parse(videoConstraints);
                    audioConstraints = JSON.parse(audioConstraints);
                    let audioDeviceExists;
                    if (audioConstraints.deviceId) {
                        audioDeviceExists = devices.some(device =>
                            device.kind === 'audioinput' && device.deviceId === audioConstraints.deviceId.exact
                        );
                    }
                    else {
                        audioDeviceExists = false;
                    }

                    let videoDeviceExists
                    if (videoConstraints.deviceId) {
                        videoDeviceExists = devices.some(device =>
                            device.kind === 'videoinput' && device.deviceId === videoConstraints.deviceId.exact
                        )
                    }
                    else {
                        videoDeviceExists = false;
                    }

                    return { audioDeviceExists, videoDeviceExists };
                } catch (error) {
                    console.error("Error checking device constraints:", error);
                    return { audioDeviceExists: false, videoDeviceExists: false };
                }
            }
            async function changeMediaDevice(type, deviceId) {
                try {
                    const videoElement = document.getElementById('videoPreview');
                    if (!window.stream) {
                        let stream = await getUserMediaWithConstraints(true, true);
                        window.stream = stream
                        videoElement.srcObject = stream;
                    }
                    let stream = videoElement.srcObject;

                    let audioConstraints = null;
                    let videoConstraints = null;
                    if (type === 'audioinput') {
                        audioConstraints = { deviceId: { exact: deviceId } };

                        let audioStream = await navigator.mediaDevices.getUserMedia({ audio: audioConstraints })

                        if (!stream) {
                            /*let stream = await getUserMediaWithConstraints(true, true);
                            let videoTrack = stream.getVideoTracks()[0];
                            let videoSettings = videoTrack.getSettings();
                            const videoDeviceId = videoSettings.deviceId;

                            let videoConstraints = { deviceId: { exact: videoDeviceId } };*/
                            videoElement.srcObject = audioStream;
                            //videoElement.srcObject.addTrack(audioStream.getVideoTracks()[0]);
                            localStorage.setItem("audioConstraints", JSON.stringify(audioConstraints))
                        }
                        else {
                            const audioTracks = stream.getAudioTracks();
                            console.log(audioTracks)
                            if (audioTracks.length > 0) {
                                stream.removeTrack(audioTracks[0]);
                                stream.addTrack(audioStream.getAudioTracks()[0])
                                localStorage.setItem("audioConstraints", JSON.stringify(audioConstraints))
                            }
                            else {
                                stream.addTrack(audioStream.getAudioTracks()[0])
                                localStorage.setItem("audioConstraints", JSON.stringify(audioConstraints))
                            }
                        }
                    } else if (type === 'videoinput') {
                        videoConstraints = { deviceId: { exact: deviceId } };

                        console.log(videoConstraints)
                        let videoStream = await navigator.mediaDevices.getUserMedia({ video: videoConstraints })
                        if (!stream) {
                            /*let stream = await getUserMediaWithConstraints(true, true);
                            let videoTrack = stream.getVideoTracks()[0];
                            let videoSettings = videoTrack.getSettings();
                            const videoDeviceId = videoSettings.deviceId;

                            let videoConstraints = { deviceId: { exact: videoDeviceId } };*/
                            videoElement.srcObject = videoStream;
                            localStorage.setItem("videoConstraints", JSON.stringify(videoConstraints))
                        }
                        else {
                            const videoTracks = stream.getVideoTracks();
                            if (videoTracks.length > 0) {
                                stream.removeTrack(videoTracks[0]);
                                stream.addTrack(videoStream.getVideoTracks()[0]);
                                console.log(videoStream.getVideoTracks()[0])
                                console.log("REPLACE VIDEO TRACK")
                                localStorage.setItem("videoConstraints", JSON.stringify(videoConstraints))
                            }
                            else {
                                stream.addTrack(videoStream.getVideoTracks()[0]);
                                console.log(videoStream.getVideoTracks()[0])
                                console.log("REPLACE VIDEO TRACK")
                                localStorage.setItem("videoConstraints", JSON.stringify(videoConstraints))
                            }
                        }
                    }
                } catch (error) {
                    console.error('Lỗi khi thay đổi thiết bị media:', error);
                }
            }
            async function getUserMediaWithConstraints(audioConstraints, videoConstraints) {
                try {
                    const constraints = {};
                    if (audioConstraints) {
                        constraints.audio = audioConstraints;
                    }
                    if (videoConstraints) {
                        constraints.video = videoConstraints;
                    }
                    const stream = await navigator.mediaDevices.getUserMedia(constraints);
                    return stream;
                } catch (error) {
                    console.error('Lỗi khi lấy media stream:', error);
                }
            }
            async function populateDropdown(dropdownId, devices, buttonId) {
                const dropdownMenu = document.getElementById(dropdownId);
                dropdownMenu.innerHTML = '';

                devices.forEach(device => {
                    const li = document.createElement('li');
                    const a = document.createElement('a');
                    a.className = 'dropdown-item';
                    a.href = '#';
                    a.textContent = device.label || `Thiết bị không có tên (${device.deviceId})`;
                    a.dataset.deviceId = device.deviceId;

                    a.addEventListener('click', async function (event) {
                        event.preventDefault();

                        const button = document.getElementById(buttonId);
                        const buttonLabel = button.querySelector('p');
                        buttonLabel.textContent = this.textContent;

                        const items = dropdownMenu.querySelectorAll('.dropdown-item');
                        items.forEach(item => item.classList.remove('active'));
                        this.classList.add('active');

                        await changeMediaDevice(devices[0].kind, this.dataset.deviceId);
                    });

                    li.appendChild(a);
                    dropdownMenu.appendChild(li);
                });
            }

            const webcamButton = $('#webcamButton');
            const micButton = $('#micButton');

            function disableButton(type, button) {
                if (type == "audio") {
                    button.attr("disabled", true);
                    button.addClass("bg-danger");
                    $("#micIcon").removeClass("bi-mic");
                    $("#micIcon").addClass("bi-mic-mute");
                    localStorage.setItem("micEnabled", false);
                } else {
                    button.attr("disabled", true);
                    $("#camera-off-text").removeClass("d-none");
                    webcamButton.addClass("bg-danger");
                    $("#webcamIcon").removeClass("bi-camera-video");
                    $("#webcamIcon").addClass("bi-camera-video-off");
                    $("#videoPreview").addClass("bg-dark");
                    localStorage.setItem("cameraEnabled", false);
                }
            }
            webcamButton.on("click", () => {
                let stream = videoPreview.captureStream();
                let track = stream.getTracks().find(track => track.kind === "video");
                console.log("click")
                if (webcamButton.hasClass("bg-danger")) {
                    track.enabled = true;
                    webcamButton.removeClass("bg-danger");
                    $("#webcamIcon").removeClass("bi-camera-video-off");
                    $("#webcamIcon").addClass("bi-camera-video");
                    $("#camera-off-text").addClass("d-none");
                    localStorage.setItem("cameraEnabled", true);
                }
                else {
                    track.enabled = false;
                    $("#camera-off-text").removeClass("d-none");
                    webcamButton.addClass("bg-danger");
                    $("#webcamIcon").removeClass("bi-camera-video");
                    $("#webcamIcon").addClass("bi-camera-video-off");
                    localStorage.setItem("cameraEnabled", false);
                }
            })
            micButton.on("click", () => {
                let stream = videoPreview.captureStream();
                let track = stream.getTracks().find(track => track.kind === "audio");
                console.log("click")
                if (micButton.hasClass("bg-danger")) {
                    track.enabled = true;
                    micButton.removeClass("bg-danger");
                    $("#micIcon").removeClass("bi-mic-mute");
                    $("#micIcon").addClass("bi-mic");
                    localStorage.setItem("micEnabled", true);
                }
                else {
                    track.enabled = false;
                    micButton.addClass("bg-danger");
                    $("#micIcon").removeClass("bi-mic");
                    $("#micIcon").addClass("bi-mic-mute");
                    localStorage.setItem("micEnabled", false);
                }
            })




            if ('sinkId' in HTMLMediaElement.prototype) {
                console.log('Hỗ trợ chức năng chuyển đổi audio output.');
            } else {
                console.warn('Trình duyệt không hỗ trợ chức năng chuyển đổi audio output.');
            }
            async function changeAudioDestination(mediaElement, deviceId) {
                try {
                    await mediaElement.setSinkId(deviceId);
                    console.log(`Chuyển đổi thành công sang thiết bị âm thanh: ${deviceId}`);
                } catch (error) {
                    let errorMessage = error;
                    if (error.name === 'SecurityError') {
                        errorMessage = `Bạn cần sử dụng HTTPS để chọn thiết bị âm thanh: ${error}`;
                    }
                    console.error('Lỗi khi chuyển đổi audio output:', errorMessage);
                }
            }
        });

    </script>
    <script src="/javascripts/message-sw.js"></script>
</body>

</html>